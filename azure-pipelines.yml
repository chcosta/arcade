trigger:
  batch: true
  branches:
    include:
    - master
    
pr:
  branches:
    include:
    - master
    - templates
  paths:
    exclude:
    - Documentation/*
    
variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: DotNetCore
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore

resources:
  containers:
  - container: LinuxContainer
    image: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-0cd4667-20170319080304

stages:
- stage: build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enableTelemetry: true
      helixRepo: dotnet/arcade
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Windows.10.Amd64.VS2017.Open
          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Windows.10.Amd64.VS2017
        variables:
        - _InternalBuildArgs: ''
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: test
                _DotNetPublishToBlobFeed : false
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: real
                _DotNetPublishToBlobFeed : true
                _Script: eng\validate-sdk.cmd
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
              Build_Debug:
                _BuildConfig: Debug
                _SignType: test
                _DotNetPublishToBlobFeed : false
        steps:
        - checkout: self
          clean: true
        # Use utility script to run script command dependent on agent OS.
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig) 
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build
        - task: PublishBuildArtifacts@1
          displayName: Publish Build to AzDo
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/NonShipping'
            PublishLocation: Container
            ArtifactName: BuildArtifacts_$(Agent.Os)_$(Agent.JobName)
          continueOnError: true
          condition: always()

      - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        - job: Linux
          container: LinuxContainer
          pool:
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
              name:  NetCorePublic-Pool
              queue: BuildPool.Ubuntu.1604.Amd64.Open
            ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
              name:  NetCoreInternal-Pool
              queue: BuildPool.Ubuntu.1604.Amd64
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _PublishType: none
                _SignType: none
                _DotNetPublishToBlobFeed : false
              Build_Release:
                _BuildConfig: Release
                _PublishType: none
                _SignType: none
                _DotNetPublishToBlobFeed : false
          steps:
          - checkout: self
            clean: true
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              /p:Test=false
            displayName: Unix Build / Publish
        - task: PublishBuildArtifacts@1
          displayName: Publish Build to AzDo
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/NonShipping'
            PublishLocation: Container
            ArtifactName: BuildArtifacts_$(Agent.Os)_$(Agent.JobName)
          continueOnError: true
          condition: always()

- stage: test
  dependsOn: build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enableTelemetry: true
      helixRepo: dotnet/arcade
      jobs:
      - job: Windows_test
        pool:
          vmimage: windows-2019
        variables:
        - HelixApiAccessToken: ''
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - group: DotNet-HelixApi-Access
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
            Build_Release:
              _BuildConfig: Release
        steps:
        - checkout: self
          clean: true
        - task: DownloadPipelineArtifact@1
          displayName: 'Download Pipeline Artifact'
          inputs:
            artifactName: 'BuildArtifact_$(Agent.Os)_$(Agent.JobName)'
        - powershell: eng\common\build.ps1
            -configuration $(_BuildConfig) 
            -prepareMachine
            -ci
            -restore
            -test
            -projects $(Build.SourcesDirectory)/tests/UnitTests.proj
            /p:RestoreSources=$(System.ArtifactsDirectory)
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.binlog
          displayName: Run Helix Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(HelixApiAccessToken)
      - job: Linux_test
        pool:
          vmImage: ubuntu-16.04
        variables:
        - HelixApiAccessToken: ''
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - group: DotNet-HelixApi-Access
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
            Build_Release:
              _BuildConfig: Release
        steps:
        - checkout: self
          clean: true
        - task: DownloadPipelineArtifact@1
          displayName: 'Download Pipeline Artifact'
          inputs:
            artifactName: 'BuildArtifact_$(Agent.Os)_$(Agent.JobName)'
        - script: eng/common/build.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            --ci
            --restore
            --test
            --projects $(Build.SourcesDirectory)/tests/UnitTests.proj
            /p:RestoreSources=$(System.ArtifactsDirectory)
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/Helix.binlog
          displayName: Run Helix Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(HelixApiAccessToken)

# - stage: validate_arcade
#   dependsOn: build
#   jobs:
#   - template: /eng/common/templates: /eng/common/templates/job/job.yml
#     parameters:
#       enablePublishBuildArtifacts: true
#       enableTelemetry: true
#       helixRepo: dotnet/Arcade
#       jobs:
#       - job: windows
#         pool:
#           ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
#             name: NetCorePublic-Pool
#             queue: BuildPool.Windows.10.Amd64.VS2017.Open
#           ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
#             name: NetCoreInternal-Pool
#             queue: BuildPool.Windows.10.Amd64.VS2017
