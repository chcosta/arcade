<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <Target Name="InstallDotNetCoreRuntimes"
          BeforeTargets="Restore"
          Inputs="%(DotNetCoreRuntimeVersion.Identity)"
          Outputs="*">
    <PropertyGroup>
      <_DotNetCoreRuntimeVersion>%(DotNetCoreRuntimeVersion.Identity)</_DotNetCoreRuntimeVersion>
      <_DotNetCoreArchitecture>%(DotNetCoreRuntimeVersion.Architecture)</_DotNetCoreArchitecture>
      <_DotNetCoreArchitecture Condition="'$(_DotNetCoreArchitecture)' == ''">x64</_DotNetCoreArchitecture>
      <_SharedFrameworkDir>$(_DotNetInstallDir)shared\Microsoft.NETCore.App\$(_DotNetCoreRuntimeVersion)</_SharedFrameworkDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
      <_DotNetInstallScript Condition="'$(_DotNetInstallScript)' == ''">$(RepositoryEngineeringDir)common\dotnet-install.ps1</_DotNetInstallScript>
      <_DotNetInstallCommand>powershell -ExecutionPolicy ByPass -NoProfile -File &quot;$(_DotNetInstallScript)&quot;</_DotNetInstallCommand>
      <_DotNetInstallArgs>-version $(_DotNetCoreRuntimeVersion) -architecture $(_DotNetCoreArchitecture)</_DotNetInstallArgs>
    </PropertyGroup>

    <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
      <_DotNetInstallScript Condition="'$(_DotNetInstallScript)' == ''">$(RepositoryEngineeringDir)common/dotnet-install.sh</_DotNetInstallScript>
      <_DotNetInstallCommand>&quot;$(_DotNetInstallScript)&quot;</_DotNetInstallCommand>
      <_DotNetInstallArgs>--version $(_DotNetCoreRuntimeVersion) $(_InstallDirArg) --architecture $(_DotNetCoreArchitecture)</_DotNetInstallArgs>
    </PropertyGroup>

    <Message Condition="!Exists('$(_SharedFrameworkDir)')" Importance="High" Text="Installing dotnet runtime: $(_DotNetCoreRuntimeVersion)" />

    <!--
      We're seeing issues on Linux in Azure Pipelines where MSBuild tries to set LC_ALL to utf8 when running a shell script.
      We don't really care about this error and it's non-blocking, but MSBuild's default parsing still flags it as an error.
      Setting IgnoreStandardErrorWarningFormat=true will work around that problem.
    -->
    <Exec 
      Condition="!Exists('$(_SharedFrameworkDir)')"
      Command="$(_DotNetInstallCommand) $(_DotNetInstallArgs)"
      ConsoleToMsBuild="true"
      IgnoreStandardErrorWarningFormat="true" />
  </Target>
</Project>