# build.yml
# Description: Defines the build phase
# Parameters:
#   agentOs: [Windows_NT (default), Linux, OSX] Used in templates to define variables which are OS specific
#   dockerImage: If defined, specifies docker image to run build steps in
#   matrix: build matrix
#   queueName: agent pool name
#   enableTelemetry: send telemetry if build is not a PR or CI build

parameters:
  agentOs: Windows_NT
  buildReason: IndividualCI
  matrix: 
    Build_Debug:
      _BuildConfig: Debug
      _PublishType: none
      _SignType: test
    Build_Release:
      _BuildConfig: Release
      _PublishType: none
      _SignType: test
  queueName: ''
  dockerImage: ''
  enableTelemetry: true
  useEsrpSigning: true

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: ${{ parameters.agentOs }}
    phaseName: ${{ parameters.agentOs }}
    dockerImage: ${{ parameters.dockerImage }}
    enableTelemetry: ${{ parameters.enableTelemetry }}
    phase:
      queue:
        name: ${{ parameters.queueName }}
        matrix: ${{ parameters.matrix }}

      variables: 
        _HelixType: build/product
        ${{ if notIn(parameters.buildReason, 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
          _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json
          _TeamName: DotNetCore
          _UseEsrpSigning: ${{ parameters.useEsrpSigning }}
          _HelixSource: official/dotnet/arcade/$(Build.SourceBranch)
          _PublishArgs: /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
            /p:PB_PublishBlobFeedUrl=$(_PublishBlobFeedUrl) 
            /p:PB_PublishType=$(_PublishType) 
        ${{ if in(parameters.buildReason, 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
          _HelixSource: pr/dotnet/arcade/$(Build.SourceBranch)
          _PublishArgs: ''

      steps:
      - template: /eng/internal-steps.yml
        parameters:
          buildReason: ${{ parameters.buildReason }}
          steps:
          - ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
            - script: eng\common\cibuild.cmd
                -configuration $(_BuildConfig) 
                -prepareMachine
                /p:SignType=$(_SignType)
                $(_PublishArgs)
              name: Build_Publish
              displayName: Build / Publish
              env:
                OfficialBuildId: $(BUILD.BUILDNUMBER)
              condition: succeeded()
          - ${{ if ne(parameters.agentOs, 'Windows_NT') }}:
            - script: eng/common/cibuild.sh
                --configuration $(_BuildConfig) 
                --prepareMachine
                /p:SignType=$(_SignType)
                $(_PublishArgs)
              name: Build_Publish
              displayName: Build / Publish
              env:
                OfficialBuildId: $(BUILD.BUILDNUMBER)
              condition: succeeded()
